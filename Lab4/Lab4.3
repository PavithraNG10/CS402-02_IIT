    .text
    .globl main

main:
    addi $sp, $sp, -4     # make space on the stack
    sw $ra, 0($sp)        # save $ra on the stack

    # Prompt user for input
    li $v0, 4             # system call code for printing a string
    la $a0, prompt1       # address of the prompt string
    syscall               # print the prompt

    # Read the first integer from the user
    li $v0, 5             # system call code for reading an integer
    syscall               # read the integer from user input
    move $t0, $v0         # store the first integer in $t0

    # Prompt user for input
    li $v0, 4             # system call code for printing a string
    la $a0, prompt2       # address of the prompt string
    syscall               # print the prompt

    # Read the second integer from the user
    li $v0, 5             # system call code for reading an integer
    syscall               # read the integer from user input
    move $t1, $v0         # store the second integer in $t1

    # Call the 'Largest' procedure
    move $a0, $t0         # pass the first integer as parameter in $a0
    move $a1, $t1         # pass the second integer as parameter in $a1
    jal Largest           # call 'Largest' procedure
    move $t2, $v0         # move the return value of 'Largest' to $t2

    # Print the result
    li $v0, 4             # system call code for printing a string
    la $a0, result        # address of the result string
    syscall               # print the message

    move $a0, $t2         # move the value of 'Largest' to $a0
    li $v0, 1             # system call code for printing an integer
    syscall               # print the value

    lw $ra, 0($sp)        # restore the return address in $ra
    addi $sp, $sp, 4     # restore the stack pointer
    jr $ra                # return from main

# The procedure 'Largest' takes two integers as parameters
# in $a0 and $a1, and returns the largest of them in $v0.
Largest:
    slt $t2, $a0, $a1     # compare $a0 < $a1
    beqz $t2, else       # if $a0 >= $a1, branch to 'else' label
    move $v0, $a1        # move $a1 to $v0 (since $a1 is larger)
    j end                # jump to 'end' label
    nop                  # execute this after branching

else:
    move $v0, $a0        # move $a0 to $v0 (since $a0 is larger)

end:
    jr $ra               # return from 'Largest'

.data
prompt1: .asciiz "Enter the first integer: "
prompt2: .asciiz "Enter the second integer: "
result: .asciiz "The largest number is "
